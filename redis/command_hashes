CODE: Using HSET, HGET and HGETALL for hashes
hset user fname "John" lname "Smith"

hget user fname

hget user lname

hget user lname1

hgetall user

hset user age 40

hget user age

hgetall user

hset user age 35

hget user age

hgetall user


ft._list

hgetall movie:1

ft.create idx:movie ON hash PREFIX 1 "movie:" SCHEMA movie_name TEXT SORTABLE release_year NUMERIC SORTABLE category TAG SORTABLE rating NUMERIC SORTABLE plot TEXT

ft.info idx:movie

hgetall actor:1

ft.create idx:actor ON hash PREFIX 1 "actor:" SCHEMA first_name TEXT SORTABLE last_name TEXT SORTABLE date_of_birth NUMERIC SORTABLE

ft.info idx:actor

hgetall theater:1

ft.create idx:theater ON hash PREFIX 1 "theater:" SCHEMA name TEXT SORTABLE location GEO

ft.info idx:theater

hgetall user:1

ft.create idx:user ON hash PREFIX 1 "user:" SCHEMA gender TAG country TAG SORTABLE last_login NUMERIC SORTABLE location GEO

ft.info idx:user

# search
# search key word
ft.search idx:movie "heat" return 2 movie_name release_year


ft.search idx:movie "heat" return 3 movie_name release_year plot
#with a field name
ft.search idx:movie "@movie_name:heat" return 3 movie_name release_year plot
#with a field name, without "california"
ft.search idx:movie "@movie_name:(heat -california)" return 3 movie_name release_year plot

#with a field name, without "women"
ft.search idx:movie "@movie_name:(heat -women)" return 3 movie_name release_year plot

#CODE: Sort data with SORTBY
# to make DESC or ASC work, the field has to have "SORTABLE" in SCHEMA field design
ft.search idx:movie "@category:{Action}" SORTBY release_year return 2 movie_name release_year
ft.search idx:movie "@category:{Action}" SORTBY release_year ASC return 2 movie_name release_year

#Septem 16,2023
#CODE: Grouping data
#return all movies count
ft.search idx:movie "*" limit 0 0
# all users count
ft.search idx:user "*" limit 0 0
# all actors count
ft.search idx:actor "*" limit 0 0
# display record per field release_year
ft.aggregate idx:movie "*" groupby 1 @release_year

ft.aggregate idx:movie "*" groupby 1 @category

ft.aggregate idx:movie "*" groupby 1 @release_year @category

ft.aggregate idx:movie "*" groupby 2 @release_year @category

ft.aggregate idx:movie "*" groupby 2 @category @release_year

ft.aggregate idx:movie "*" groupby 2 @release_year @category

ft.aggregate idx:movie "*" groupby 2 @category @release_year

ft.aggregate idx:movie "*" groupby 2 @release_year @category

ft.aggregate idx:movie "*" groupby 1 @release_year
# display the count of movies in each year, without order and with a self-generated column name
ft.aggregate idx:movie "*" groupby 1 @release_year reduce count 0
# use aliase "total_num_movies" instead of self-generated names
ft.aggregate idx:movie "*" groupby 1 @release_year reduce count 0 as total_num_movies
# key word contains "heat"
ft.aggregate idx:movie "heat" groupby 1 @release_year reduce count 0 as total_num_movies

ft.aggregate idx:movie "*" groupby 1 @release_year reduce count 0 as total_num_movies
# order by release_year
ft.aggregate idx:movie "*" groupby 1 @release_year reduce count 0 as total_num_movies SORTBY 1 @release_year
# grammar error, SORTBY 2 arguments
ft.aggregate idx:movie "*" groupby 1 @release_year reduce count 0 as total_num_movies SORTBY 1 @release_year DESC

ft.aggregate idx:movie "*" groupby 1 @release_year reduce count 0 as total_num_movies SORTBY 1 @release_year ASC
#default order is ASC
ft.aggregate idx:movie "*" groupby 1 @release_year reduce count 0 as total_num_movies SORTBY 2 @release_year ASC

ft.aggregate idx:movie "*" groupby 1 @release_year reduce count 0 as total_num_movies SORTBY 2 @release_year DESC
